{"version":3,"sources":["webpack:///diff_notes.845808371f921616fde2.bundle.js","webpack:///./diff_notes/components/new_issue_for_discussion.js","webpack:///./diff_notes/diff_notes_bundle.js","webpack:///./diff_notes/services/resolve.js","webpack:///./diff_notes/components/resolve_btn.js","webpack:///./diff_notes/mixins/discussion.js","webpack:///./diff_notes/components/diff_note_avatars.js","webpack:///./diff_notes/components/jump_to_discussion.js","webpack:///./diff_notes/models/discussion.js","webpack:///./diff_notes/components/resolve_count.js","webpack:///./diff_notes/models/note.js","webpack:///./diff_notes/icons/collapse_icon.svg","webpack:///./diff_notes/components/comment_resolve_btn.js","webpack:///./diff_notes/components/resolve_discussion_btn.js","webpack:///./diff_notes/stores/comments.js"],"names":["webpackJsonp","/hXC","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_vue__","NewIssueForDiscussion","extend","props","discussionId","type","String","required","data","discussions","CommentsStore","state","computed","discussion","this","showButton","isResolved","component","EuiY","$","projectPath","document","querySelector","dataset","window","gl","diffNoteApps","ResolveService","DiffNotesResolveServiceClass","diffNotesCompileComponents","each","tmp","template","get","outerHTML","tmpApp","$mount","replaceWith","$el","$components","filter","closest","length","$this","noteId","attr","el","components","resolve-count","ResolveCount","call","G+9o","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_IMPORTED_MODULE_1_vue_resource__","__WEBPACK_IMPORTED_MODULE_1_vue_resource___default","n","_createClass","defineProperties","target","i","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","use","a","ResolveServiceClass","root","noteResource","resource","discussionResource","save","delete","mergeRequestId","promise","unResolveAll","resolveAll","then","response","loading","status","json","resolved_by","unResolveAllNotes","resolveAllNotes","updateHeadline","Flash","MU9e","ResolveBtn","Number","resolved","Boolean","canResolve","resolvedBy","authorName","authorAvatar","noteTruncated","note","watch","handler","deep","buttonText","resolvedByName","methods","updateTooltip","_this","$nextTick","$refs","button","tooltip","resolve","_this2","unresolve","update","mounted","container","beforeDestroy","created","create","getNote","SVCF","exports","w","DiscussionMixins","discussionCount","keys","resolvedDiscussionCount","resolvedCount","unresolvedDiscussionCount","unresolvedCount","TP7M","__WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg__","__WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg___default","DiffNoteAvatars","isVisible","lineType","storeState","shownAvatars","collapseIcon","addNoCommentClass","setDiscussionVisible","hasClass","on","destroyed","off","notesSubset","_this3","notes","slice","map","extraNotesTitle","extra","notesCount","moreText","clickedAvatar","e","_this4","addDiffNote","toggleDiscussionsToggleState","toggleClass","nextUntil","$notesHolders","find","$visibleNotesHolders","id","is","WYUY","JumpToDiscussion","mixins","allResolved","lastResolvedId","lastId","jumpToNextUnresolvedDiscussion","discussionsSelector","discussionIdsInScope","firstUnresolvedDiscussionId","nextUnresolvedDiscussionId","activeTab","mrTabs","currentAction","hasDiscussionsToJumpTo","jumpToFirstDiscussion","discussionIdsForElements","elements","toArray","activateTab","currentDiscussionFound","$target","trigger","show","prevEl","prev","scrollTo","offset","ZZAo","DiscussionModel","noteObj","set","NoteModel","discussionSelector","$discussionHeadline","discussion_headline_html","append","utils","localTimeAgo","remove","cRac","loggedOut","resolvedCountText","epgj","gL/p","rK+X","CommentAndResolveBtn","textareaIsEmpty","isResolvable","isDiscussionResolved","$textarea","val","tExy","ResolveDiscussionBtn","toggleResolveForDiscussion","createDiscussion","zKIA","undefined","createNote","deleteNote","unresolvedDiscussionIds","ids","push"],"mappings":"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","file":"diff_notes.845808371f921616fde2.bundle.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ \"/hXC\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* global CommentsStore */\n\n\n\n(function () {\n  var NewIssueForDiscussion = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      discussionId: {\n        type: String,\n        required: true\n      }\n    },\n    data: function data() {\n      return {\n        discussions: CommentsStore.state\n      };\n    },\n\n    computed: {\n      discussion: function discussion() {\n        return this.discussions[this.discussionId];\n      },\n      showButton: function showButton() {\n        if (this.discussion) return !this.discussion.isResolved();\n        return false;\n      }\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('new-issue-for-discussion-btn', NewIssueForDiscussion);\n})();\n\n/***/ }),\n\n/***/ \"EuiY\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable func-names, comma-dangle, new-cap, no-new, max-len */\n/* global ResolveCount */\n\n\n\n__webpack_require__(\"ZZAo\");\n__webpack_require__(\"epgj\");\n__webpack_require__(\"zKIA\");\n__webpack_require__(\"G+9o\");\n__webpack_require__(\"SVCF\");\n__webpack_require__(\"rK+X\");\n__webpack_require__(\"WYUY\");\n__webpack_require__(\"MU9e\");\n__webpack_require__(\"cRac\");\n__webpack_require__(\"tExy\");\n__webpack_require__(\"TP7M\");\n__webpack_require__(\"/hXC\");\n\n$(function () {\n  var projectPath = document.querySelector('.merge-request').dataset.projectPath;\n  var COMPONENT_SELECTOR = 'resolve-btn, resolve-discussion-btn, jump-to-discussion, comment-and-resolve-btn, new-issue-for-discussion-btn';\n\n  window.gl = window.gl || {};\n  window.gl.diffNoteApps = {};\n\n  window.ResolveService = new gl.DiffNotesResolveServiceClass(projectPath);\n\n  gl.diffNotesCompileComponents = function () {\n    $('diff-note-avatars').each(function () {\n      var tmp = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n        template: $(this).get(0).outerHTML\n      });\n      var tmpApp = new tmp().$mount();\n\n      $(this).replaceWith(tmpApp.$el);\n    });\n\n    var $components = $(COMPONENT_SELECTOR).filter(function () {\n      return $(this).closest('resolve-count').length !== 1;\n    });\n\n    if ($components) {\n      $components.each(function () {\n        var $this = $(this);\n        var noteId = $this.attr(':note-id');\n        var tmp = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n          template: $this.get(0).outerHTML\n        });\n        var tmpApp = new tmp().$mount();\n\n        if (noteId) {\n          gl.diffNoteApps['note_' + noteId] = tmpApp;\n        }\n\n        $this.replaceWith(tmpApp.$el);\n      });\n    }\n  };\n\n  gl.diffNotesCompileComponents();\n\n  new __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"]({\n    el: '#resolve-count-app',\n    components: {\n      'resolve-count': ResolveCount\n    }\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"G+9o\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_resource__ = __webpack_require__(\"7UJR\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_resource___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_resource__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable class-methods-use-this, one-var, camelcase, no-new, comma-dangle, no-param-reassign, max-len */\n/* global Flash */\n/* global CommentsStore */\n\n\n\n\n__webpack_require__(\"wFzz\");\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].use(__WEBPACK_IMPORTED_MODULE_1_vue_resource___default.a);\n\n(function () {\n  window.gl = window.gl || {};\n\n  var ResolveServiceClass = function () {\n    function ResolveServiceClass(root) {\n      _classCallCheck(this, ResolveServiceClass);\n\n      this.noteResource = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].resource(root + '/notes{/noteId}/resolve');\n      this.discussionResource = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].resource(root + '/merge_requests{/mergeRequestId}/discussions{/discussionId}/resolve');\n    }\n\n    _createClass(ResolveServiceClass, [{\n      key: 'resolve',\n      value: function resolve(noteId) {\n        return this.noteResource.save({ noteId: noteId }, {});\n      }\n    }, {\n      key: 'unresolve',\n      value: function unresolve(noteId) {\n        return this.noteResource.delete({ noteId: noteId }, {});\n      }\n    }, {\n      key: 'toggleResolveForDiscussion',\n      value: function toggleResolveForDiscussion(mergeRequestId, discussionId) {\n        var discussion = CommentsStore.state[discussionId];\n        var isResolved = discussion.isResolved();\n        var promise = void 0;\n\n        if (isResolved) {\n          promise = this.unResolveAll(mergeRequestId, discussionId);\n        } else {\n          promise = this.resolveAll(mergeRequestId, discussionId);\n        }\n\n        promise.then(function (response) {\n          discussion.loading = false;\n\n          if (response.status === 200) {\n            var data = response.json();\n            var resolved_by = data ? data.resolved_by : null;\n\n            if (isResolved) {\n              discussion.unResolveAllNotes();\n            } else {\n              discussion.resolveAllNotes(resolved_by);\n            }\n\n            discussion.updateHeadline(data);\n          } else {\n            new Flash('An error occurred when trying to resolve a discussion. Please try again.', 'alert');\n          }\n        });\n      }\n    }, {\n      key: 'resolveAll',\n      value: function resolveAll(mergeRequestId, discussionId) {\n        var discussion = CommentsStore.state[discussionId];\n\n        discussion.loading = true;\n\n        return this.discussionResource.save({\n          mergeRequestId: mergeRequestId,\n          discussionId: discussionId\n        }, {});\n      }\n    }, {\n      key: 'unResolveAll',\n      value: function unResolveAll(mergeRequestId, discussionId) {\n        var discussion = CommentsStore.state[discussionId];\n\n        discussion.loading = true;\n\n        return this.discussionResource.delete({\n          mergeRequestId: mergeRequestId,\n          discussionId: discussionId\n        }, {});\n      }\n    }]);\n\n    return ResolveServiceClass;\n  }();\n\n  gl.DiffNotesResolveServiceClass = ResolveServiceClass;\n})();\n\n/***/ }),\n\n/***/ \"MU9e\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable comma-dangle, object-shorthand, func-names, quote-props, no-else-return, camelcase, no-new, max-len */\n/* global CommentsStore */\n/* global ResolveService */\n/* global Flash */\n\n\n\n(function () {\n  var ResolveBtn = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      noteId: Number,\n      discussionId: String,\n      resolved: Boolean,\n      canResolve: Boolean,\n      resolvedBy: String,\n      authorName: String,\n      authorAvatar: String,\n      noteTruncated: String\n    },\n    data: function data() {\n      return {\n        discussions: CommentsStore.state,\n        loading: false,\n        note: {}\n      };\n    },\n    watch: {\n      'discussions': {\n        handler: 'updateTooltip',\n        deep: true\n      }\n    },\n    computed: {\n      discussion: function discussion() {\n        return this.discussions[this.discussionId];\n      },\n      buttonText: function buttonText() {\n        if (this.isResolved) {\n          return 'Resolved by ' + this.resolvedByName;\n        } else if (this.canResolve) {\n          return 'Mark as resolved';\n        } else {\n          return 'Unable to resolve';\n        }\n      },\n      isResolved: function isResolved() {\n        if (this.note) {\n          return this.note.resolved;\n        } else {\n          return false;\n        }\n      },\n      resolvedByName: function resolvedByName() {\n        return this.note.resolved_by;\n      }\n    },\n    methods: {\n      updateTooltip: function updateTooltip() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          $(_this.$refs.button).tooltip('hide').tooltip('fixTitle');\n        });\n      },\n      resolve: function resolve() {\n        var _this2 = this;\n\n        if (!this.canResolve) return;\n\n        var promise = void 0;\n        this.loading = true;\n\n        if (this.isResolved) {\n          promise = ResolveService.unresolve(this.noteId);\n        } else {\n          promise = ResolveService.resolve(this.noteId);\n        }\n\n        promise.then(function (response) {\n          _this2.loading = false;\n\n          if (response.status === 200) {\n            var data = response.json();\n            var resolved_by = data ? data.resolved_by : null;\n\n            CommentsStore.update(_this2.discussionId, _this2.noteId, !_this2.isResolved, resolved_by);\n            _this2.discussion.updateHeadline(data);\n          } else {\n            new Flash('An error occurred when trying to resolve a comment. Please try again.', 'alert');\n          }\n\n          _this2.updateTooltip();\n        });\n      }\n    },\n    mounted: function mounted() {\n      $(this.$refs.button).tooltip({\n        container: 'body'\n      });\n    },\n    beforeDestroy: function beforeDestroy() {\n      CommentsStore.delete(this.discussionId, this.noteId);\n    },\n    created: function created() {\n      CommentsStore.create({\n        discussionId: this.discussionId,\n        noteId: this.noteId,\n        canResolve: this.canResolve,\n        resolved: this.resolved,\n        resolvedBy: this.resolvedBy,\n        authorName: this.authorName,\n        authorAvatar: this.authorAvatar,\n        noteTruncated: this.noteTruncated\n      });\n\n      this.note = this.discussion.getNote(this.noteId);\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('resolve-btn', ResolveBtn);\n})();\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"SVCF\":\n/***/ (function(module, exports) {\n\n/* eslint-disable object-shorthand, func-names, guard-for-in, no-restricted-syntax, comma-dangle, no-param-reassign, max-len */\n\n(function (w) {\n  w.DiscussionMixins = {\n    computed: {\n      discussionCount: function discussionCount() {\n        return Object.keys(this.discussions).length;\n      },\n      resolvedDiscussionCount: function resolvedDiscussionCount() {\n        var resolvedCount = 0;\n\n        for (var discussionId in this.discussions) {\n          var discussion = this.discussions[discussionId];\n\n          if (discussion.isResolved()) {\n            resolvedCount += 1;\n          }\n        }\n\n        return resolvedCount;\n      },\n      unresolvedDiscussionCount: function unresolvedDiscussionCount() {\n        var unresolvedCount = 0;\n\n        for (var discussionId in this.discussions) {\n          var discussion = this.discussions[discussionId];\n\n          if (!discussion.isResolved()) {\n            unresolvedCount += 1;\n          }\n        }\n\n        return unresolvedCount;\n      }\n    }\n  };\n})(window);\n\n/***/ }),\n\n/***/ \"TP7M\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg__ = __webpack_require__(\"gL/p\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg__);\n/* global CommentsStore */\n/* global notes */\n\n\n\n\n(function () {\n  var DiffNoteAvatars = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: ['discussionId'],\n    data: function data() {\n      return {\n        isVisible: false,\n        lineType: '',\n        storeState: CommentsStore.state,\n        shownAvatars: 3,\n        collapseIcon: __WEBPACK_IMPORTED_MODULE_1__icons_collapse_icon_svg___default.a\n      };\n    },\n\n    template: '\\n      <div class=\"diff-comment-avatar-holders\"\\n        v-show=\"notesCount !== 0\">\\n        <div v-if=\"!isVisible\">\\n          <img v-for=\"note in notesSubset\"\\n            class=\"avatar diff-comment-avatar has-tooltip js-diff-comment-avatar\"\\n            width=\"19\"\\n            height=\"19\"\\n            role=\"button\"\\n            data-container=\"body\"\\n            data-placement=\"top\"\\n            data-html=\"true\"\\n            :data-line-type=\"lineType\"\\n            :title=\"note.authorName + \\': \\' + note.noteTruncated\"\\n            :src=\"note.authorAvatar\"\\n            @click=\"clickedAvatar($event)\" />\\n          <span v-if=\"notesCount > shownAvatars\"\\n            class=\"diff-comments-more-count has-tooltip js-diff-comment-avatar\"\\n            data-container=\"body\"\\n            data-placement=\"top\"\\n            ref=\"extraComments\"\\n            role=\"button\"\\n            :data-line-type=\"lineType\"\\n            :title=\"extraNotesTitle\"\\n            @click=\"clickedAvatar($event)\">{{ moreText }}</span>\\n        </div>\\n        <button class=\"diff-notes-collapse js-diff-comment-avatar\"\\n          type=\"button\"\\n          aria-label=\"Show comments\"\\n          :data-line-type=\"lineType\"\\n          @click=\"clickedAvatar($event)\"\\n          v-if=\"isVisible\"\\n          v-html=\"collapseIcon\">\\n        </button>\\n      </div>\\n    ',\n    mounted: function mounted() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.addNoCommentClass();\n        _this.setDiscussionVisible();\n\n        _this.lineType = $(_this.$el).closest('.diff-line-num').hasClass('old_line') ? 'old' : 'new';\n      });\n\n      $(document).on('toggle.comments', function () {\n        _this.$nextTick(function () {\n          _this.setDiscussionVisible();\n        });\n      });\n    },\n    destroyed: function destroyed() {\n      $(document).off('toggle.comments');\n    },\n\n    watch: {\n      storeState: {\n        handler: function handler() {\n          var _this2 = this;\n\n          this.$nextTick(function () {\n            $('.has-tooltip', _this2.$el).tooltip('fixTitle');\n\n            // We need to add/remove a class to an element that is outside the Vue instance\n            _this2.addNoCommentClass();\n          });\n        },\n\n        deep: true\n      }\n    },\n    computed: {\n      notesSubset: function notesSubset() {\n        var _this3 = this;\n\n        var notes = [];\n\n        if (this.discussion) {\n          notes = Object.keys(this.discussion.notes).slice(0, this.shownAvatars).map(function (noteId) {\n            return _this3.discussion.notes[noteId];\n          });\n        }\n\n        return notes;\n      },\n      extraNotesTitle: function extraNotesTitle() {\n        if (this.discussion) {\n          var extra = this.discussion.notesCount() - this.shownAvatars;\n\n          return extra + ' more comment' + (extra > 1 ? 's' : '');\n        }\n\n        return '';\n      },\n      discussion: function discussion() {\n        return this.storeState[this.discussionId];\n      },\n      notesCount: function notesCount() {\n        if (this.discussion) {\n          return this.discussion.notesCount();\n        }\n\n        return 0;\n      },\n      moreText: function moreText() {\n        var plusSign = this.notesCount < 100 ? '+' : '';\n\n        return '' + plusSign + (this.notesCount - this.shownAvatars);\n      }\n    },\n    methods: {\n      clickedAvatar: function clickedAvatar(e) {\n        var _this4 = this;\n\n        notes.addDiffNote(e);\n\n        // Toggle the active state of the toggle all button\n        this.toggleDiscussionsToggleState();\n\n        this.$nextTick(function () {\n          _this4.setDiscussionVisible();\n\n          $('.has-tooltip', _this4.$el).tooltip('fixTitle');\n          $('.has-tooltip', _this4.$el).tooltip('hide');\n        });\n      },\n      addNoCommentClass: function addNoCommentClass() {\n        var notesCount = this.notesCount;\n\n        $(this.$el).closest('.js-avatar-container').toggleClass('js-no-comment-btn', notesCount > 0).nextUntil('.js-avatar-container').toggleClass('js-no-comment-btn', notesCount > 0);\n      },\n      toggleDiscussionsToggleState: function toggleDiscussionsToggleState() {\n        var $notesHolders = $(this.$el).closest('.code').find('.notes_holder');\n        var $visibleNotesHolders = $notesHolders.filter(':visible');\n        var $toggleDiffCommentsBtn = $(this.$el).closest('.diff-file').find('.js-toggle-diff-comments');\n\n        $toggleDiffCommentsBtn.toggleClass('active', $notesHolders.length === $visibleNotesHolders.length);\n      },\n      setDiscussionVisible: function setDiscussionVisible() {\n        this.isVisible = $('.diffs .notes[data-discussion-id=\"' + this.discussion.id + '\"]').is(':visible');\n      }\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('diff-note-avatars', DiffNoteAvatars);\n})();\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"WYUY\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable comma-dangle, object-shorthand, func-names, no-else-return, guard-for-in, no-restricted-syntax, one-var, space-before-function-paren, no-lonely-if, no-continue, brace-style, max-len, quotes */\n/* global DiscussionMixins */\n/* global CommentsStore */\n\n\n\n(function () {\n  var JumpToDiscussion = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    mixins: [DiscussionMixins],\n    props: {\n      discussionId: String\n    },\n    data: function data() {\n      return {\n        discussions: CommentsStore.state,\n        discussion: {}\n      };\n    },\n    computed: {\n      allResolved: function allResolved() {\n        return this.unresolvedDiscussionCount === 0;\n      },\n      showButton: function showButton() {\n        if (this.discussionId) {\n          if (this.unresolvedDiscussionCount > 1) {\n            return true;\n          } else {\n            return this.discussionId !== this.lastResolvedId;\n          }\n        } else {\n          return this.unresolvedDiscussionCount >= 1;\n        }\n      },\n      lastResolvedId: function lastResolvedId() {\n        var lastId = void 0;\n        for (var discussionId in this.discussions) {\n          var discussion = this.discussions[discussionId];\n\n          if (!discussion.isResolved()) {\n            lastId = discussion.id;\n          }\n        }\n        return lastId;\n      }\n    },\n    methods: {\n      jumpToNextUnresolvedDiscussion: function jumpToNextUnresolvedDiscussion() {\n        var discussionsSelector = void 0;\n        var discussionIdsInScope = void 0;\n        var firstUnresolvedDiscussionId = void 0;\n        var nextUnresolvedDiscussionId = void 0;\n        var activeTab = window.mrTabs.currentAction;\n        var hasDiscussionsToJumpTo = true;\n        var jumpToFirstDiscussion = !this.discussionId;\n\n        var discussionIdsForElements = function discussionIdsForElements(elements) {\n          return elements.map(function () {\n            return $(this).attr('data-discussion-id');\n          }).toArray();\n        };\n\n        var discussions = this.discussions;\n\n        if (activeTab === 'diffs') {\n          discussionsSelector = '.diffs .notes[data-discussion-id]';\n          discussionIdsInScope = discussionIdsForElements($(discussionsSelector));\n\n          var unresolvedDiscussionCount = 0;\n\n          for (var i = 0; i < discussionIdsInScope.length; i += 1) {\n            var discussionId = discussionIdsInScope[i];\n            var discussion = discussions[discussionId];\n            if (discussion && !discussion.isResolved()) {\n              unresolvedDiscussionCount += 1;\n            }\n          }\n\n          if (this.discussionId && !this.discussion.isResolved()) {\n            // If this is the last unresolved discussion on the diffs tab,\n            // there are no discussions to jump to.\n            if (unresolvedDiscussionCount === 1) {\n              hasDiscussionsToJumpTo = false;\n            }\n          } else {\n            // If there are no unresolved discussions on the diffs tab at all,\n            // there are no discussions to jump to.\n            if (unresolvedDiscussionCount === 0) {\n              hasDiscussionsToJumpTo = false;\n            }\n          }\n        } else if (activeTab !== 'notes') {\n          // If we are on the commits or builds tabs,\n          // there are no discussions to jump to.\n          hasDiscussionsToJumpTo = false;\n        }\n\n        if (!hasDiscussionsToJumpTo) {\n          // If there are no discussions to jump to on the current page,\n          // switch to the notes tab and jump to the first disucssion there.\n          window.mrTabs.activateTab('notes');\n          activeTab = 'notes';\n          jumpToFirstDiscussion = true;\n        }\n\n        if (activeTab === 'notes') {\n          discussionsSelector = '.discussion[data-discussion-id]';\n          discussionIdsInScope = discussionIdsForElements($(discussionsSelector));\n        }\n\n        var currentDiscussionFound = false;\n        for (var _i = 0; _i < discussionIdsInScope.length; _i += 1) {\n          var _discussionId = discussionIdsInScope[_i];\n          var _discussion = discussions[_discussionId];\n\n          if (!_discussion) {\n            // Discussions for comments on commits in this MR don't have a resolved status.\n            continue;\n          }\n\n          if (!firstUnresolvedDiscussionId && !_discussion.isResolved()) {\n            firstUnresolvedDiscussionId = _discussionId;\n\n            if (jumpToFirstDiscussion) {\n              break;\n            }\n          }\n\n          if (!jumpToFirstDiscussion) {\n            if (currentDiscussionFound) {\n              if (!_discussion.isResolved()) {\n                nextUnresolvedDiscussionId = _discussionId;\n                break;\n              } else {\n                continue;\n              }\n            }\n\n            if (_discussionId === this.discussionId) {\n              currentDiscussionFound = true;\n            }\n          }\n        }\n\n        nextUnresolvedDiscussionId = nextUnresolvedDiscussionId || firstUnresolvedDiscussionId;\n\n        if (!nextUnresolvedDiscussionId) {\n          return;\n        }\n\n        var $target = $(discussionsSelector + '[data-discussion-id=\"' + nextUnresolvedDiscussionId + '\"]');\n\n        if (activeTab === 'notes') {\n          $target = $target.closest('.note-discussion');\n\n          // If the next discussion is closed, toggle it open.\n          if ($target.find('.js-toggle-content').is(':hidden')) {\n            $target.find('.js-toggle-button i').trigger('click');\n          }\n        } else if (activeTab === 'diffs') {\n          // Resolved discussions are hidden in the diffs tab by default.\n          // If they are marked unresolved on the notes tab, they will still be hidden on the diffs tab.\n          // When jumping between unresolved discussions on the diffs tab, we show them.\n          $target.closest(\".content\").show();\n\n          $target = $target.closest(\"tr.notes_holder\");\n          $target.show();\n\n          // If we are on the diffs tab, we don't scroll to the discussion itself, but to\n          // 4 diff lines above it: the line the discussion was in response to + 3 context\n          var prevEl = void 0;\n          for (var _i2 = 0; _i2 < 4; _i2 += 1) {\n            prevEl = $target.prev();\n\n            // If the discussion doesn't have 4 lines above it, we'll have to do with fewer.\n            if (!prevEl.hasClass(\"line_holder\")) {\n              break;\n            }\n\n            $target = prevEl;\n          }\n        }\n\n        $.scrollTo($target, {\n          offset: 0\n        });\n      }\n    },\n    created: function created() {\n      this.discussion = this.discussions[this.discussionId];\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('jump-to-discussion', JumpToDiscussion);\n})();\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"ZZAo\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable space-before-function-paren, camelcase, guard-for-in, no-restricted-syntax, no-unused-vars, max-len */\n/* global NoteModel */\n\n\n\nvar DiscussionModel = function () {\n  function DiscussionModel(discussionId) {\n    _classCallCheck(this, DiscussionModel);\n\n    this.id = discussionId;\n    this.notes = {};\n    this.loading = false;\n    this.canResolve = false;\n  }\n\n  _createClass(DiscussionModel, [{\n    key: 'createNote',\n    value: function createNote(noteObj) {\n      __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].set(this.notes, noteObj.noteId, new NoteModel(this.id, noteObj));\n    }\n  }, {\n    key: 'deleteNote',\n    value: function deleteNote(noteId) {\n      __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].delete(this.notes, noteId);\n    }\n  }, {\n    key: 'getNote',\n    value: function getNote(noteId) {\n      return this.notes[noteId];\n    }\n  }, {\n    key: 'notesCount',\n    value: function notesCount() {\n      return Object.keys(this.notes).length;\n    }\n  }, {\n    key: 'isResolved',\n    value: function isResolved() {\n      for (var noteId in this.notes) {\n        var note = this.notes[noteId];\n\n        if (!note.resolved) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: 'resolveAllNotes',\n    value: function resolveAllNotes(resolved_by) {\n      for (var noteId in this.notes) {\n        var note = this.notes[noteId];\n\n        if (!note.resolved) {\n          note.resolved = true;\n          note.resolved_by = resolved_by;\n        }\n      }\n    }\n  }, {\n    key: 'unResolveAllNotes',\n    value: function unResolveAllNotes() {\n      for (var noteId in this.notes) {\n        var note = this.notes[noteId];\n\n        if (note.resolved) {\n          note.resolved = false;\n          note.resolved_by = null;\n        }\n      }\n    }\n  }, {\n    key: 'updateHeadline',\n    value: function updateHeadline(data) {\n      var discussionSelector = '.discussion[data-discussion-id=\"' + this.id + '\"]';\n      var $discussionHeadline = $(discussionSelector + ' .js-discussion-headline');\n\n      if (data.discussion_headline_html) {\n        if ($discussionHeadline.length) {\n          $discussionHeadline.replaceWith(data.discussion_headline_html);\n        } else {\n          $(discussionSelector + ' .discussion-header').append(data.discussion_headline_html);\n        }\n\n        gl.utils.localTimeAgo($('.js-timeago', '' + discussionSelector));\n      } else {\n        $discussionHeadline.remove();\n      }\n    }\n  }, {\n    key: 'isResolvable',\n    value: function isResolvable() {\n      if (!this.canResolve) {\n        return false;\n      }\n\n      for (var noteId in this.notes) {\n        var note = this.notes[noteId];\n\n        if (note.canResolve) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return DiscussionModel;\n}();\n\nwindow.DiscussionModel = DiscussionModel;\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"cRac\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable comma-dangle, object-shorthand, func-names, no-param-reassign */\n/* global DiscussionMixins */\n/* global CommentsStore */\n\n\n\n(function (w) {\n  w.ResolveCount = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    mixins: [DiscussionMixins],\n    props: {\n      loggedOut: Boolean\n    },\n    data: function data() {\n      return {\n        discussions: CommentsStore.state\n      };\n    },\n    computed: {\n      allResolved: function allResolved() {\n        return this.resolvedDiscussionCount === this.discussionCount;\n      },\n      resolvedCountText: function resolvedCountText() {\n        return this.discussionCount === 1 ? 'discussion' : 'discussions';\n      }\n    }\n  });\n})(window);\n\n/***/ }),\n\n/***/ \"epgj\":\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable camelcase, no-unused-vars */\n\nvar NoteModel = function NoteModel(discussionId, noteObj) {\n  _classCallCheck(this, NoteModel);\n\n  this.discussionId = discussionId;\n  this.id = noteObj.noteId;\n  this.canResolve = noteObj.canResolve;\n  this.resolved = noteObj.resolved;\n  this.resolved_by = noteObj.resolvedBy;\n  this.authorName = noteObj.authorName;\n  this.authorAvatar = noteObj.authorAvatar;\n  this.noteTruncated = noteObj.noteTruncated;\n};\n\nwindow.NoteModel = NoteModel;\n\n/***/ }),\n\n/***/ \"gL/p\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg width=\\\"11\\\" height=\\\"11\\\" viewBox=\\\"0 0 9 13\\\"><path d=\\\"M2.57568253,6.49866948 C2.50548852,6.57199715 2.44637866,6.59708255 2.39835118,6.57392645 C2.3503237,6.55077034 2.32631032,6.48902165 2.32631032,6.38867852 L2.32631032,-2.13272614 C2.32631032,-2.23306927 2.3503237,-2.29481796 2.39835118,-2.31797406 C2.44637866,-2.34113017 2.50548852,-2.31604477 2.57568253,-2.24271709 L6.51022184,1.86747129 C6.53977721,1.8983461 6.56379059,1.93500939 6.5822627,1.97746225 L6.5822627,2.27849013 C6.56379059,2.31708364 6.53977721,2.35374693 6.51022184,2.38848109 L2.57568253,6.49866948 Z\\\" transform=\\\"translate(4.454287, 2.127976) rotate(90.000000) translate(-4.454287, -2.127976) \\\"></path><path d=\\\"M3.74312342,2.09553332 C3.74312342,1.99519019 3.77821989,1.9083561 3.8484139,1.83502843 C3.91860791,1.76170075 4.00173115,1.72503747 4.09778611,1.72503747 L4.80711151,1.72503747 C4.90316647,1.72503747 4.98628971,1.76170075 5.05648372,1.83502843 C5.12667773,1.9083561 5.16177421,1.99519019 5.16177421,2.09553332 L5.16177421,10.2464421 C5.16177421,10.3467853 5.12667773,10.4336194 5.05648372,10.506947 C4.98628971,10.5802747 4.90316647,10.616938 4.80711151,10.616938 L4.09778611,10.616938 C4.00173115,10.616938 3.91860791,10.5802747 3.8484139,10.506947 C3.77821989,10.4336194 3.74312342,10.3467853 3.74312342,10.2464421 L3.74312342,2.09553332 Z\\\" transform=\\\"translate(4.452449, 6.170988) rotate(-90.000000) translate(-4.452449, -6.170988) \\\"></path><path d=\\\"M2.57568253,14.6236695 C2.50548852,14.6969971 2.44637866,14.7220826 2.39835118,14.6989264 C2.3503237,14.6757703 2.32631032,14.6140216 2.32631032,14.5136785 L2.32631032,5.99227386 C2.32631032,5.89193073 2.3503237,5.83018204 2.39835118,5.80702594 C2.44637866,5.78386983 2.50548852,5.80895523 2.57568253,5.88228291 L6.51022184,9.99247129 C6.53977721,10.0233461 6.56379059,10.0600094 6.5822627,10.1024622 L6.5822627,10.4034901 C6.56379059,10.4420836 6.53977721,10.4787469 6.51022184,10.5134811 L2.57568253,14.6236695 Z\\\" transform=\\\"translate(4.454287, 10.252976) scale(1, -1) rotate(90.000000) translate(-4.454287, -10.252976) \\\"></path></svg>\\n\"\n\n/***/ }),\n\n/***/ \"rK+X\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable comma-dangle, object-shorthand, func-names, no-else-return, quotes, no-lonely-if, max-len */\n/* global CommentsStore */\n\n\n\n(function () {\n  var CommentAndResolveBtn = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      discussionId: String\n    },\n    data: function data() {\n      return {\n        textareaIsEmpty: true,\n        discussion: {}\n      };\n    },\n\n    computed: {\n      showButton: function showButton() {\n        if (this.discussion) {\n          return this.discussion.isResolvable();\n        } else {\n          return false;\n        }\n      },\n      isDiscussionResolved: function isDiscussionResolved() {\n        return this.discussion.isResolved();\n      },\n      buttonText: function buttonText() {\n        if (this.isDiscussionResolved) {\n          if (this.textareaIsEmpty) {\n            return \"Unresolve discussion\";\n          } else {\n            return \"Comment & unresolve discussion\";\n          }\n        } else {\n          if (this.textareaIsEmpty) {\n            return \"Resolve discussion\";\n          } else {\n            return \"Comment & resolve discussion\";\n          }\n        }\n      }\n    },\n    created: function created() {\n      if (this.discussionId) {\n        this.discussion = CommentsStore.state[this.discussionId];\n      }\n    },\n\n    mounted: function mounted() {\n      var _this = this;\n\n      if (!this.discussionId) return;\n\n      var $textarea = $(\".js-discussion-note-form[data-discussion-id=\" + this.discussionId + \"] .note-textarea\");\n      this.textareaIsEmpty = $textarea.val() === '';\n\n      $textarea.on('input.comment-and-resolve-btn', function () {\n        _this.textareaIsEmpty = $textarea.val() === '';\n      });\n    },\n    destroyed: function destroyed() {\n      if (!this.discussionId) return;\n\n      $(\".js-discussion-note-form[data-discussion-id=\" + this.discussionId + \"] .note-textarea\").off('input.comment-and-resolve-btn');\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('comment-and-resolve-btn', CommentAndResolveBtn);\n})(window);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"tExy\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable object-shorthand, func-names, space-before-function-paren, comma-dangle, no-else-return, quotes, max-len */\n/* global CommentsStore */\n/* global ResolveService */\n\n\n\n(function () {\n  var ResolveDiscussionBtn = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      discussionId: String,\n      mergeRequestId: Number,\n      canResolve: Boolean\n    },\n    data: function data() {\n      return {\n        discussion: {}\n      };\n    },\n    computed: {\n      showButton: function showButton() {\n        if (this.discussion) {\n          return this.discussion.isResolvable();\n        } else {\n          return false;\n        }\n      },\n      isDiscussionResolved: function isDiscussionResolved() {\n        if (this.discussion) {\n          return this.discussion.isResolved();\n        } else {\n          return false;\n        }\n      },\n      buttonText: function buttonText() {\n        if (this.isDiscussionResolved) {\n          return \"Unresolve discussion\";\n        } else {\n          return \"Resolve discussion\";\n        }\n      },\n      loading: function loading() {\n        if (this.discussion) {\n          return this.discussion.loading;\n        } else {\n          return false;\n        }\n      }\n    },\n    methods: {\n      resolve: function resolve() {\n        ResolveService.toggleResolveForDiscussion(this.mergeRequestId, this.discussionId);\n      }\n    },\n    created: function created() {\n      CommentsStore.createDiscussion(this.discussionId, this.canResolve);\n\n      this.discussion = CommentsStore.state[this.discussionId];\n    }\n  });\n\n  __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].component('resolve-discussion-btn', ResolveDiscussionBtn);\n})();\n\n/***/ }),\n\n/***/ \"zKIA\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"JTVE\");\n/* eslint-disable object-shorthand, func-names, camelcase, no-restricted-syntax, guard-for-in, comma-dangle, max-len, no-param-reassign */\n/* global DiscussionModel */\n\n\n\n(function (w) {\n  w.CommentsStore = {\n    state: {},\n    get: function get(discussionId, noteId) {\n      return this.state[discussionId].getNote(noteId);\n    },\n    createDiscussion: function createDiscussion(discussionId, canResolve) {\n      var discussion = this.state[discussionId];\n      if (!this.state[discussionId]) {\n        discussion = new DiscussionModel(discussionId);\n        __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].set(this.state, discussionId, discussion);\n      }\n\n      if (canResolve !== undefined) {\n        discussion.canResolve = canResolve;\n      }\n\n      return discussion;\n    },\n    create: function create(noteObj) {\n      var discussion = this.createDiscussion(noteObj.discussionId);\n\n      discussion.createNote(noteObj);\n    },\n    update: function update(discussionId, noteId, resolved, resolved_by) {\n      var discussion = this.state[discussionId];\n      var note = discussion.getNote(noteId);\n      note.resolved = resolved;\n      note.resolved_by = resolved_by;\n    },\n    delete: function _delete(discussionId, noteId) {\n      var discussion = this.state[discussionId];\n      discussion.deleteNote(noteId);\n\n      if (discussion.notesCount() === 0) {\n        __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].delete(this.state, discussionId);\n      }\n    },\n    unresolvedDiscussionIds: function unresolvedDiscussionIds() {\n      var ids = [];\n\n      for (var discussionId in this.state) {\n        var discussion = this.state[discussionId];\n\n        if (!discussion.isResolved()) {\n          ids.push(discussion.id);\n        }\n      }\n\n      return ids;\n    }\n  };\n})(window);\n\n/***/ })\n\n},[\"EuiY\"]);\n\n\n// WEBPACK FOOTER //\n// diff_notes.845808371f921616fde2.bundle.js","/* global CommentsStore */\n\nimport Vue from 'vue';\n\n(() => {\n  const NewIssueForDiscussion = Vue.extend({\n    props: {\n      discussionId: {\n        type: String,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        discussions: CommentsStore.state,\n      };\n    },\n    computed: {\n      discussion() {\n        return this.discussions[this.discussionId];\n      },\n      showButton() {\n        if (this.discussion) return !this.discussion.isResolved();\n        return false;\n      },\n    },\n  });\n\n  Vue.component('new-issue-for-discussion-btn', NewIssueForDiscussion);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/new_issue_for_discussion.js","/* eslint-disable func-names, comma-dangle, new-cap, no-new, max-len */\n/* global ResolveCount */\n\nimport Vue from 'vue';\n\nrequire('./models/discussion');\nrequire('./models/note');\nrequire('./stores/comments');\nrequire('./services/resolve');\nrequire('./mixins/discussion');\nrequire('./components/comment_resolve_btn');\nrequire('./components/jump_to_discussion');\nrequire('./components/resolve_btn');\nrequire('./components/resolve_count');\nrequire('./components/resolve_discussion_btn');\nrequire('./components/diff_note_avatars');\nrequire('./components/new_issue_for_discussion');\n\n$(() => {\n  const projectPath = document.querySelector('.merge-request').dataset.projectPath;\n  const COMPONENT_SELECTOR = 'resolve-btn, resolve-discussion-btn, jump-to-discussion, comment-and-resolve-btn, new-issue-for-discussion-btn';\n\n  window.gl = window.gl || {};\n  window.gl.diffNoteApps = {};\n\n  window.ResolveService = new gl.DiffNotesResolveServiceClass(projectPath);\n\n  gl.diffNotesCompileComponents = () => {\n    $('diff-note-avatars').each(function () {\n      const tmp = Vue.extend({\n        template: $(this).get(0).outerHTML\n      });\n      const tmpApp = new tmp().$mount();\n\n      $(this).replaceWith(tmpApp.$el);\n    });\n\n    const $components = $(COMPONENT_SELECTOR).filter(function () {\n      return $(this).closest('resolve-count').length !== 1;\n    });\n\n    if ($components) {\n      $components.each(function () {\n        const $this = $(this);\n        const noteId = $this.attr(':note-id');\n        const tmp = Vue.extend({\n          template: $this.get(0).outerHTML\n        });\n        const tmpApp = new tmp().$mount();\n\n        if (noteId) {\n          gl.diffNoteApps[`note_${noteId}`] = tmpApp;\n        }\n\n        $this.replaceWith(tmpApp.$el);\n      });\n    }\n  };\n\n  gl.diffNotesCompileComponents();\n\n  new Vue({\n    el: '#resolve-count-app',\n    components: {\n      'resolve-count': ResolveCount\n    }\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/diff_notes_bundle.js","/* eslint-disable class-methods-use-this, one-var, camelcase, no-new, comma-dangle, no-param-reassign, max-len */\n/* global Flash */\n/* global CommentsStore */\n\nimport Vue from 'vue';\nimport VueResource from 'vue-resource';\n\nrequire('../../vue_shared/vue_resource_interceptor');\n\nVue.use(VueResource);\n\n(() => {\n  window.gl = window.gl || {};\n\n  class ResolveServiceClass {\n    constructor(root) {\n      this.noteResource = Vue.resource(`${root}/notes{/noteId}/resolve`);\n      this.discussionResource = Vue.resource(`${root}/merge_requests{/mergeRequestId}/discussions{/discussionId}/resolve`);\n    }\n\n    resolve(noteId) {\n      return this.noteResource.save({ noteId }, {});\n    }\n\n    unresolve(noteId) {\n      return this.noteResource.delete({ noteId }, {});\n    }\n\n    toggleResolveForDiscussion(mergeRequestId, discussionId) {\n      const discussion = CommentsStore.state[discussionId];\n      const isResolved = discussion.isResolved();\n      let promise;\n\n      if (isResolved) {\n        promise = this.unResolveAll(mergeRequestId, discussionId);\n      } else {\n        promise = this.resolveAll(mergeRequestId, discussionId);\n      }\n\n      promise.then((response) => {\n        discussion.loading = false;\n\n        if (response.status === 200) {\n          const data = response.json();\n          const resolved_by = data ? data.resolved_by : null;\n\n          if (isResolved) {\n            discussion.unResolveAllNotes();\n          } else {\n            discussion.resolveAllNotes(resolved_by);\n          }\n\n          discussion.updateHeadline(data);\n        } else {\n          new Flash('An error occurred when trying to resolve a discussion. Please try again.', 'alert');\n        }\n      });\n    }\n\n    resolveAll(mergeRequestId, discussionId) {\n      const discussion = CommentsStore.state[discussionId];\n\n      discussion.loading = true;\n\n      return this.discussionResource.save({\n        mergeRequestId,\n        discussionId\n      }, {});\n    }\n\n    unResolveAll(mergeRequestId, discussionId) {\n      const discussion = CommentsStore.state[discussionId];\n\n      discussion.loading = true;\n\n      return this.discussionResource.delete({\n        mergeRequestId,\n        discussionId\n      }, {});\n    }\n  }\n\n  gl.DiffNotesResolveServiceClass = ResolveServiceClass;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/services/resolve.js","/* eslint-disable comma-dangle, object-shorthand, func-names, quote-props, no-else-return, camelcase, no-new, max-len */\n/* global CommentsStore */\n/* global ResolveService */\n/* global Flash */\n\nimport Vue from 'vue';\n\n(() => {\n  const ResolveBtn = Vue.extend({\n    props: {\n      noteId: Number,\n      discussionId: String,\n      resolved: Boolean,\n      canResolve: Boolean,\n      resolvedBy: String,\n      authorName: String,\n      authorAvatar: String,\n      noteTruncated: String,\n    },\n    data: function () {\n      return {\n        discussions: CommentsStore.state,\n        loading: false,\n        note: {},\n      };\n    },\n    watch: {\n      'discussions': {\n        handler: 'updateTooltip',\n        deep: true\n      }\n    },\n    computed: {\n      discussion: function () {\n        return this.discussions[this.discussionId];\n      },\n      buttonText: function () {\n        if (this.isResolved) {\n          return `Resolved by ${this.resolvedByName}`;\n        } else if (this.canResolve) {\n          return 'Mark as resolved';\n        } else {\n          return 'Unable to resolve';\n        }\n      },\n      isResolved: function () {\n        if (this.note) {\n          return this.note.resolved;\n        } else {\n          return false;\n        }\n      },\n      resolvedByName: function () {\n        return this.note.resolved_by;\n      },\n    },\n    methods: {\n      updateTooltip: function () {\n        this.$nextTick(() => {\n          $(this.$refs.button)\n            .tooltip('hide')\n            .tooltip('fixTitle');\n        });\n      },\n      resolve: function () {\n        if (!this.canResolve) return;\n\n        let promise;\n        this.loading = true;\n\n        if (this.isResolved) {\n          promise = ResolveService\n            .unresolve(this.noteId);\n        } else {\n          promise = ResolveService\n            .resolve(this.noteId);\n        }\n\n        promise.then((response) => {\n          this.loading = false;\n\n          if (response.status === 200) {\n            const data = response.json();\n            const resolved_by = data ? data.resolved_by : null;\n\n            CommentsStore.update(this.discussionId, this.noteId, !this.isResolved, resolved_by);\n            this.discussion.updateHeadline(data);\n          } else {\n            new Flash('An error occurred when trying to resolve a comment. Please try again.', 'alert');\n          }\n\n          this.updateTooltip();\n        });\n      }\n    },\n    mounted: function () {\n      $(this.$refs.button).tooltip({\n        container: 'body'\n      });\n    },\n    beforeDestroy: function () {\n      CommentsStore.delete(this.discussionId, this.noteId);\n    },\n    created: function () {\n      CommentsStore.create({\n        discussionId: this.discussionId,\n        noteId: this.noteId,\n        canResolve: this.canResolve,\n        resolved: this.resolved,\n        resolvedBy: this.resolvedBy,\n        authorName: this.authorName,\n        authorAvatar: this.authorAvatar,\n        noteTruncated: this.noteTruncated,\n      });\n\n      this.note = this.discussion.getNote(this.noteId);\n    }\n  });\n\n  Vue.component('resolve-btn', ResolveBtn);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/resolve_btn.js","/* eslint-disable object-shorthand, func-names, guard-for-in, no-restricted-syntax, comma-dangle, no-param-reassign, max-len */\n\n((w) => {\n  w.DiscussionMixins = {\n    computed: {\n      discussionCount: function () {\n        return Object.keys(this.discussions).length;\n      },\n      resolvedDiscussionCount: function () {\n        let resolvedCount = 0;\n\n        for (const discussionId in this.discussions) {\n          const discussion = this.discussions[discussionId];\n\n          if (discussion.isResolved()) {\n            resolvedCount += 1;\n          }\n        }\n\n        return resolvedCount;\n      },\n      unresolvedDiscussionCount: function () {\n        let unresolvedCount = 0;\n\n        for (const discussionId in this.discussions) {\n          const discussion = this.discussions[discussionId];\n\n          if (!discussion.isResolved()) {\n            unresolvedCount += 1;\n          }\n        }\n\n        return unresolvedCount;\n      }\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/mixins/discussion.js","/* global CommentsStore */\n/* global notes */\n\nimport Vue from 'vue';\nimport collapseIcon from '../icons/collapse_icon.svg';\n\n(() => {\n  const DiffNoteAvatars = Vue.extend({\n    props: ['discussionId'],\n    data() {\n      return {\n        isVisible: false,\n        lineType: '',\n        storeState: CommentsStore.state,\n        shownAvatars: 3,\n        collapseIcon,\n      };\n    },\n    template: `\n      <div class=\"diff-comment-avatar-holders\"\n        v-show=\"notesCount !== 0\">\n        <div v-if=\"!isVisible\">\n          <img v-for=\"note in notesSubset\"\n            class=\"avatar diff-comment-avatar has-tooltip js-diff-comment-avatar\"\n            width=\"19\"\n            height=\"19\"\n            role=\"button\"\n            data-container=\"body\"\n            data-placement=\"top\"\n            data-html=\"true\"\n            :data-line-type=\"lineType\"\n            :title=\"note.authorName + ': ' + note.noteTruncated\"\n            :src=\"note.authorAvatar\"\n            @click=\"clickedAvatar($event)\" />\n          <span v-if=\"notesCount > shownAvatars\"\n            class=\"diff-comments-more-count has-tooltip js-diff-comment-avatar\"\n            data-container=\"body\"\n            data-placement=\"top\"\n            ref=\"extraComments\"\n            role=\"button\"\n            :data-line-type=\"lineType\"\n            :title=\"extraNotesTitle\"\n            @click=\"clickedAvatar($event)\">{{ moreText }}</span>\n        </div>\n        <button class=\"diff-notes-collapse js-diff-comment-avatar\"\n          type=\"button\"\n          aria-label=\"Show comments\"\n          :data-line-type=\"lineType\"\n          @click=\"clickedAvatar($event)\"\n          v-if=\"isVisible\"\n          v-html=\"collapseIcon\">\n        </button>\n      </div>\n    `,\n    mounted() {\n      this.$nextTick(() => {\n        this.addNoCommentClass();\n        this.setDiscussionVisible();\n\n        this.lineType = $(this.$el).closest('.diff-line-num').hasClass('old_line') ? 'old' : 'new';\n      });\n\n      $(document).on('toggle.comments', () => {\n        this.$nextTick(() => {\n          this.setDiscussionVisible();\n        });\n      });\n    },\n    destroyed() {\n      $(document).off('toggle.comments');\n    },\n    watch: {\n      storeState: {\n        handler() {\n          this.$nextTick(() => {\n            $('.has-tooltip', this.$el).tooltip('fixTitle');\n\n            // We need to add/remove a class to an element that is outside the Vue instance\n            this.addNoCommentClass();\n          });\n        },\n        deep: true,\n      },\n    },\n    computed: {\n      notesSubset() {\n        let notes = [];\n\n        if (this.discussion) {\n          notes = Object.keys(this.discussion.notes)\n            .slice(0, this.shownAvatars)\n            .map(noteId => this.discussion.notes[noteId]);\n        }\n\n        return notes;\n      },\n      extraNotesTitle() {\n        if (this.discussion) {\n          const extra = this.discussion.notesCount() - this.shownAvatars;\n\n          return `${extra} more comment${extra > 1 ? 's' : ''}`;\n        }\n\n        return '';\n      },\n      discussion() {\n        return this.storeState[this.discussionId];\n      },\n      notesCount() {\n        if (this.discussion) {\n          return this.discussion.notesCount();\n        }\n\n        return 0;\n      },\n      moreText() {\n        const plusSign = this.notesCount < 100 ? '+' : '';\n\n        return `${plusSign}${this.notesCount - this.shownAvatars}`;\n      },\n    },\n    methods: {\n      clickedAvatar(e) {\n        notes.addDiffNote(e);\n\n        // Toggle the active state of the toggle all button\n        this.toggleDiscussionsToggleState();\n\n        this.$nextTick(() => {\n          this.setDiscussionVisible();\n\n          $('.has-tooltip', this.$el).tooltip('fixTitle');\n          $('.has-tooltip', this.$el).tooltip('hide');\n        });\n      },\n      addNoCommentClass() {\n        const notesCount = this.notesCount;\n\n        $(this.$el).closest('.js-avatar-container')\n          .toggleClass('js-no-comment-btn', notesCount > 0)\n          .nextUntil('.js-avatar-container')\n          .toggleClass('js-no-comment-btn', notesCount > 0);\n      },\n      toggleDiscussionsToggleState() {\n        const $notesHolders = $(this.$el).closest('.code').find('.notes_holder');\n        const $visibleNotesHolders = $notesHolders.filter(':visible');\n        const $toggleDiffCommentsBtn = $(this.$el).closest('.diff-file').find('.js-toggle-diff-comments');\n\n        $toggleDiffCommentsBtn.toggleClass('active', $notesHolders.length === $visibleNotesHolders.length);\n      },\n      setDiscussionVisible() {\n        this.isVisible = $(`.diffs .notes[data-discussion-id=\"${this.discussion.id}\"]`).is(':visible');\n      },\n    },\n  });\n\n  Vue.component('diff-note-avatars', DiffNoteAvatars);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/diff_note_avatars.js","/* eslint-disable comma-dangle, object-shorthand, func-names, no-else-return, guard-for-in, no-restricted-syntax, one-var, space-before-function-paren, no-lonely-if, no-continue, brace-style, max-len, quotes */\n/* global DiscussionMixins */\n/* global CommentsStore */\n\nimport Vue from 'vue';\n\n(() => {\n  const JumpToDiscussion = Vue.extend({\n    mixins: [DiscussionMixins],\n    props: {\n      discussionId: String\n    },\n    data: function () {\n      return {\n        discussions: CommentsStore.state,\n        discussion: {},\n      };\n    },\n    computed: {\n      allResolved: function () {\n        return this.unresolvedDiscussionCount === 0;\n      },\n      showButton: function () {\n        if (this.discussionId) {\n          if (this.unresolvedDiscussionCount > 1) {\n            return true;\n          } else {\n            return this.discussionId !== this.lastResolvedId;\n          }\n        } else {\n          return this.unresolvedDiscussionCount >= 1;\n        }\n      },\n      lastResolvedId: function () {\n        let lastId;\n        for (const discussionId in this.discussions) {\n          const discussion = this.discussions[discussionId];\n\n          if (!discussion.isResolved()) {\n            lastId = discussion.id;\n          }\n        }\n        return lastId;\n      }\n    },\n    methods: {\n      jumpToNextUnresolvedDiscussion: function () {\n        let discussionsSelector;\n        let discussionIdsInScope;\n        let firstUnresolvedDiscussionId;\n        let nextUnresolvedDiscussionId;\n        let activeTab = window.mrTabs.currentAction;\n        let hasDiscussionsToJumpTo = true;\n        let jumpToFirstDiscussion = !this.discussionId;\n\n        const discussionIdsForElements = function(elements) {\n          return elements.map(function() {\n            return $(this).attr('data-discussion-id');\n          }).toArray();\n        };\n\n        const discussions = this.discussions;\n\n        if (activeTab === 'diffs') {\n          discussionsSelector = '.diffs .notes[data-discussion-id]';\n          discussionIdsInScope = discussionIdsForElements($(discussionsSelector));\n\n          let unresolvedDiscussionCount = 0;\n\n          for (let i = 0; i < discussionIdsInScope.length; i += 1) {\n            const discussionId = discussionIdsInScope[i];\n            const discussion = discussions[discussionId];\n            if (discussion && !discussion.isResolved()) {\n              unresolvedDiscussionCount += 1;\n            }\n          }\n\n          if (this.discussionId && !this.discussion.isResolved()) {\n            // If this is the last unresolved discussion on the diffs tab,\n            // there are no discussions to jump to.\n            if (unresolvedDiscussionCount === 1) {\n              hasDiscussionsToJumpTo = false;\n            }\n          } else {\n            // If there are no unresolved discussions on the diffs tab at all,\n            // there are no discussions to jump to.\n            if (unresolvedDiscussionCount === 0) {\n              hasDiscussionsToJumpTo = false;\n            }\n          }\n        } else if (activeTab !== 'notes') {\n          // If we are on the commits or builds tabs,\n          // there are no discussions to jump to.\n          hasDiscussionsToJumpTo = false;\n        }\n\n        if (!hasDiscussionsToJumpTo) {\n          // If there are no discussions to jump to on the current page,\n          // switch to the notes tab and jump to the first disucssion there.\n          window.mrTabs.activateTab('notes');\n          activeTab = 'notes';\n          jumpToFirstDiscussion = true;\n        }\n\n        if (activeTab === 'notes') {\n          discussionsSelector = '.discussion[data-discussion-id]';\n          discussionIdsInScope = discussionIdsForElements($(discussionsSelector));\n        }\n\n        let currentDiscussionFound = false;\n        for (let i = 0; i < discussionIdsInScope.length; i += 1) {\n          const discussionId = discussionIdsInScope[i];\n          const discussion = discussions[discussionId];\n\n          if (!discussion) {\n            // Discussions for comments on commits in this MR don't have a resolved status.\n            continue;\n          }\n\n          if (!firstUnresolvedDiscussionId && !discussion.isResolved()) {\n            firstUnresolvedDiscussionId = discussionId;\n\n            if (jumpToFirstDiscussion) {\n              break;\n            }\n          }\n\n          if (!jumpToFirstDiscussion) {\n            if (currentDiscussionFound) {\n              if (!discussion.isResolved()) {\n                nextUnresolvedDiscussionId = discussionId;\n                break;\n              }\n              else {\n                continue;\n              }\n            }\n\n            if (discussionId === this.discussionId) {\n              currentDiscussionFound = true;\n            }\n          }\n        }\n\n        nextUnresolvedDiscussionId = nextUnresolvedDiscussionId || firstUnresolvedDiscussionId;\n\n        if (!nextUnresolvedDiscussionId) {\n          return;\n        }\n\n        let $target = $(`${discussionsSelector}[data-discussion-id=\"${nextUnresolvedDiscussionId}\"]`);\n\n        if (activeTab === 'notes') {\n          $target = $target.closest('.note-discussion');\n\n          // If the next discussion is closed, toggle it open.\n          if ($target.find('.js-toggle-content').is(':hidden')) {\n            $target.find('.js-toggle-button i').trigger('click');\n          }\n        } else if (activeTab === 'diffs') {\n          // Resolved discussions are hidden in the diffs tab by default.\n          // If they are marked unresolved on the notes tab, they will still be hidden on the diffs tab.\n          // When jumping between unresolved discussions on the diffs tab, we show them.\n          $target.closest(\".content\").show();\n\n          $target = $target.closest(\"tr.notes_holder\");\n          $target.show();\n\n          // If we are on the diffs tab, we don't scroll to the discussion itself, but to\n          // 4 diff lines above it: the line the discussion was in response to + 3 context\n          let prevEl;\n          for (let i = 0; i < 4; i += 1) {\n            prevEl = $target.prev();\n\n            // If the discussion doesn't have 4 lines above it, we'll have to do with fewer.\n            if (!prevEl.hasClass(\"line_holder\")) {\n              break;\n            }\n\n            $target = prevEl;\n          }\n        }\n\n        $.scrollTo($target, {\n          offset: 0\n        });\n      }\n    },\n    created() {\n      this.discussion = this.discussions[this.discussionId];\n    },\n  });\n\n  Vue.component('jump-to-discussion', JumpToDiscussion);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/jump_to_discussion.js","/* eslint-disable space-before-function-paren, camelcase, guard-for-in, no-restricted-syntax, no-unused-vars, max-len */\n/* global NoteModel */\n\nimport Vue from 'vue';\n\nclass DiscussionModel {\n  constructor (discussionId) {\n    this.id = discussionId;\n    this.notes = {};\n    this.loading = false;\n    this.canResolve = false;\n  }\n\n  createNote (noteObj) {\n    Vue.set(this.notes, noteObj.noteId, new NoteModel(this.id, noteObj));\n  }\n\n  deleteNote (noteId) {\n    Vue.delete(this.notes, noteId);\n  }\n\n  getNote (noteId) {\n    return this.notes[noteId];\n  }\n\n  notesCount() {\n    return Object.keys(this.notes).length;\n  }\n\n  isResolved () {\n    for (const noteId in this.notes) {\n      const note = this.notes[noteId];\n\n      if (!note.resolved) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  resolveAllNotes (resolved_by) {\n    for (const noteId in this.notes) {\n      const note = this.notes[noteId];\n\n      if (!note.resolved) {\n        note.resolved = true;\n        note.resolved_by = resolved_by;\n      }\n    }\n  }\n\n  unResolveAllNotes () {\n    for (const noteId in this.notes) {\n      const note = this.notes[noteId];\n\n      if (note.resolved) {\n        note.resolved = false;\n        note.resolved_by = null;\n      }\n    }\n  }\n\n  updateHeadline (data) {\n    const discussionSelector = `.discussion[data-discussion-id=\"${this.id}\"]`;\n    const $discussionHeadline = $(`${discussionSelector} .js-discussion-headline`);\n\n    if (data.discussion_headline_html) {\n      if ($discussionHeadline.length) {\n        $discussionHeadline.replaceWith(data.discussion_headline_html);\n      } else {\n        $(`${discussionSelector} .discussion-header`).append(data.discussion_headline_html);\n      }\n\n      gl.utils.localTimeAgo($('.js-timeago', `${discussionSelector}`));\n    } else {\n      $discussionHeadline.remove();\n    }\n  }\n\n  isResolvable () {\n    if (!this.canResolve) {\n      return false;\n    }\n\n    for (const noteId in this.notes) {\n      const note = this.notes[noteId];\n\n      if (note.canResolve) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nwindow.DiscussionModel = DiscussionModel;\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/models/discussion.js","/* eslint-disable comma-dangle, object-shorthand, func-names, no-param-reassign */\n/* global DiscussionMixins */\n/* global CommentsStore */\n\nimport Vue from 'vue';\n\n((w) => {\n  w.ResolveCount = Vue.extend({\n    mixins: [DiscussionMixins],\n    props: {\n      loggedOut: Boolean\n    },\n    data: function () {\n      return {\n        discussions: CommentsStore.state\n      };\n    },\n    computed: {\n      allResolved: function () {\n        return this.resolvedDiscussionCount === this.discussionCount;\n      },\n      resolvedCountText() {\n        return this.discussionCount === 1 ? 'discussion' : 'discussions';\n      }\n    }\n  });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/resolve_count.js","/* eslint-disable camelcase, no-unused-vars */\n\nclass NoteModel {\n  constructor(discussionId, noteObj) {\n    this.discussionId = discussionId;\n    this.id = noteObj.noteId;\n    this.canResolve = noteObj.canResolve;\n    this.resolved = noteObj.resolved;\n    this.resolved_by = noteObj.resolvedBy;\n    this.authorName = noteObj.authorName;\n    this.authorAvatar = noteObj.authorAvatar;\n    this.noteTruncated = noteObj.noteTruncated;\n  }\n}\n\nwindow.NoteModel = NoteModel;\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/models/note.js","module.exports = \"<svg width=\\\"11\\\" height=\\\"11\\\" viewBox=\\\"0 0 9 13\\\"><path d=\\\"M2.57568253,6.49866948 C2.50548852,6.57199715 2.44637866,6.59708255 2.39835118,6.57392645 C2.3503237,6.55077034 2.32631032,6.48902165 2.32631032,6.38867852 L2.32631032,-2.13272614 C2.32631032,-2.23306927 2.3503237,-2.29481796 2.39835118,-2.31797406 C2.44637866,-2.34113017 2.50548852,-2.31604477 2.57568253,-2.24271709 L6.51022184,1.86747129 C6.53977721,1.8983461 6.56379059,1.93500939 6.5822627,1.97746225 L6.5822627,2.27849013 C6.56379059,2.31708364 6.53977721,2.35374693 6.51022184,2.38848109 L2.57568253,6.49866948 Z\\\" transform=\\\"translate(4.454287, 2.127976) rotate(90.000000) translate(-4.454287, -2.127976) \\\"></path><path d=\\\"M3.74312342,2.09553332 C3.74312342,1.99519019 3.77821989,1.9083561 3.8484139,1.83502843 C3.91860791,1.76170075 4.00173115,1.72503747 4.09778611,1.72503747 L4.80711151,1.72503747 C4.90316647,1.72503747 4.98628971,1.76170075 5.05648372,1.83502843 C5.12667773,1.9083561 5.16177421,1.99519019 5.16177421,2.09553332 L5.16177421,10.2464421 C5.16177421,10.3467853 5.12667773,10.4336194 5.05648372,10.506947 C4.98628971,10.5802747 4.90316647,10.616938 4.80711151,10.616938 L4.09778611,10.616938 C4.00173115,10.616938 3.91860791,10.5802747 3.8484139,10.506947 C3.77821989,10.4336194 3.74312342,10.3467853 3.74312342,10.2464421 L3.74312342,2.09553332 Z\\\" transform=\\\"translate(4.452449, 6.170988) rotate(-90.000000) translate(-4.452449, -6.170988) \\\"></path><path d=\\\"M2.57568253,14.6236695 C2.50548852,14.6969971 2.44637866,14.7220826 2.39835118,14.6989264 C2.3503237,14.6757703 2.32631032,14.6140216 2.32631032,14.5136785 L2.32631032,5.99227386 C2.32631032,5.89193073 2.3503237,5.83018204 2.39835118,5.80702594 C2.44637866,5.78386983 2.50548852,5.80895523 2.57568253,5.88228291 L6.51022184,9.99247129 C6.53977721,10.0233461 6.56379059,10.0600094 6.5822627,10.1024622 L6.5822627,10.4034901 C6.56379059,10.4420836 6.53977721,10.4787469 6.51022184,10.5134811 L2.57568253,14.6236695 Z\\\" transform=\\\"translate(4.454287, 10.252976) scale(1, -1) rotate(90.000000) translate(-4.454287, -10.252976) \\\"></path></svg>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./diff_notes/icons/collapse_icon.svg\n// module id = gL/p\n// module chunks = 10","/* eslint-disable comma-dangle, object-shorthand, func-names, no-else-return, quotes, no-lonely-if, max-len */\n/* global CommentsStore */\n\nimport Vue from 'vue';\n\n(() => {\n  const CommentAndResolveBtn = Vue.extend({\n    props: {\n      discussionId: String,\n    },\n    data() {\n      return {\n        textareaIsEmpty: true,\n        discussion: {},\n      };\n    },\n    computed: {\n      showButton: function () {\n        if (this.discussion) {\n          return this.discussion.isResolvable();\n        } else {\n          return false;\n        }\n      },\n      isDiscussionResolved: function () {\n        return this.discussion.isResolved();\n      },\n      buttonText: function () {\n        if (this.isDiscussionResolved) {\n          if (this.textareaIsEmpty) {\n            return \"Unresolve discussion\";\n          } else {\n            return \"Comment & unresolve discussion\";\n          }\n        } else {\n          if (this.textareaIsEmpty) {\n            return \"Resolve discussion\";\n          } else {\n            return \"Comment & resolve discussion\";\n          }\n        }\n      }\n    },\n    created() {\n      if (this.discussionId) {\n        this.discussion = CommentsStore.state[this.discussionId];\n      }\n    },\n    mounted: function () {\n      if (!this.discussionId) return;\n\n      const $textarea = $(`.js-discussion-note-form[data-discussion-id=${this.discussionId}] .note-textarea`);\n      this.textareaIsEmpty = $textarea.val() === '';\n\n      $textarea.on('input.comment-and-resolve-btn', () => {\n        this.textareaIsEmpty = $textarea.val() === '';\n      });\n    },\n    destroyed: function () {\n      if (!this.discussionId) return;\n\n      $(`.js-discussion-note-form[data-discussion-id=${this.discussionId}] .note-textarea`).off('input.comment-and-resolve-btn');\n    }\n  });\n\n  Vue.component('comment-and-resolve-btn', CommentAndResolveBtn);\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/comment_resolve_btn.js","/* eslint-disable object-shorthand, func-names, space-before-function-paren, comma-dangle, no-else-return, quotes, max-len */\n/* global CommentsStore */\n/* global ResolveService */\n\nimport Vue from 'vue';\n\n(() => {\n  const ResolveDiscussionBtn = Vue.extend({\n    props: {\n      discussionId: String,\n      mergeRequestId: Number,\n      canResolve: Boolean,\n    },\n    data: function() {\n      return {\n        discussion: {},\n      };\n    },\n    computed: {\n      showButton: function () {\n        if (this.discussion) {\n          return this.discussion.isResolvable();\n        } else {\n          return false;\n        }\n      },\n      isDiscussionResolved: function () {\n        if (this.discussion) {\n          return this.discussion.isResolved();\n        } else {\n          return false;\n        }\n      },\n      buttonText: function () {\n        if (this.isDiscussionResolved) {\n          return \"Unresolve discussion\";\n        } else {\n          return \"Resolve discussion\";\n        }\n      },\n      loading: function () {\n        if (this.discussion) {\n          return this.discussion.loading;\n        } else {\n          return false;\n        }\n      }\n    },\n    methods: {\n      resolve: function () {\n        ResolveService.toggleResolveForDiscussion(this.mergeRequestId, this.discussionId);\n      }\n    },\n    created: function () {\n      CommentsStore.createDiscussion(this.discussionId, this.canResolve);\n\n      this.discussion = CommentsStore.state[this.discussionId];\n    }\n  });\n\n  Vue.component('resolve-discussion-btn', ResolveDiscussionBtn);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/components/resolve_discussion_btn.js","/* eslint-disable object-shorthand, func-names, camelcase, no-restricted-syntax, guard-for-in, comma-dangle, max-len, no-param-reassign */\n/* global DiscussionModel */\n\nimport Vue from 'vue';\n\n((w) => {\n  w.CommentsStore = {\n    state: {},\n    get: function (discussionId, noteId) {\n      return this.state[discussionId].getNote(noteId);\n    },\n    createDiscussion: function (discussionId, canResolve) {\n      let discussion = this.state[discussionId];\n      if (!this.state[discussionId]) {\n        discussion = new DiscussionModel(discussionId);\n        Vue.set(this.state, discussionId, discussion);\n      }\n\n      if (canResolve !== undefined) {\n        discussion.canResolve = canResolve;\n      }\n\n      return discussion;\n    },\n    create: function (noteObj) {\n      const discussion = this.createDiscussion(noteObj.discussionId);\n\n      discussion.createNote(noteObj);\n    },\n    update: function (discussionId, noteId, resolved, resolved_by) {\n      const discussion = this.state[discussionId];\n      const note = discussion.getNote(noteId);\n      note.resolved = resolved;\n      note.resolved_by = resolved_by;\n    },\n    delete: function (discussionId, noteId) {\n      const discussion = this.state[discussionId];\n      discussion.deleteNote(noteId);\n\n      if (discussion.notesCount() === 0) {\n        Vue.delete(this.state, discussionId);\n      }\n    },\n    unresolvedDiscussionIds: function () {\n      const ids = [];\n\n      for (const discussionId in this.state) {\n        const discussion = this.state[discussionId];\n\n        if (!discussion.isResolved()) {\n          ids.push(discussion.id);\n        }\n      }\n\n      return ids;\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./diff_notes/stores/comments.js"],"sourceRoot":""}