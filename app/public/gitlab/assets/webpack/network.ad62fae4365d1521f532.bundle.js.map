{"version":3,"sources":["webpack:///network.ad62fae4365d1521f532.bundle.js","webpack:///./network/network.js","webpack:///./network/network_bundle.js","webpack:///./network/branch_graph.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js","webpack:///./network/raphael.js"],"names":["webpackJsonp","+jvm","module","__webpack_exports__","__webpack_require__","$","__WEBPACK_IMPORTED_MODULE_0__branch_graph__","Network","opts","vph","click","this","closest","submit","branch_graph","window","height","css","call","45VA","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__network__","length","network_graph","url","attr","commit_url","ref","commit_id","ShortcutsNetwork","AKfL","__WEBPACK_IMPORTED_MODULE_0__raphael__","BranchGraph","element1","options1","element","options","scrollTop","bind","scrollBottom","scrollRight","scrollLeft","scrollUp","scrollDown","preparedCommits","mtime","mspace","parents","colors","offsetX","offsetY","unitTime","unitSpace","prev_start","load","prototype","ajax","method","dataType","success","proxy","data","hide","prepareData","days","commits","buildGraph","c","ch","cw","j","len","collectParents","graphHeight","graphWidth","width","Math","max","r","i","get","top","set","barHeight","id","isParent","markCommit","collectColors","p","results","time","space","push","l","len1","ref1","results1","k","getColor","cuday","cumonth","day","mm","rect","fill","text","font","renderPartialGraph","bindEvents","commit","end","isGraphEdge","start","x","y","floor","abs","hasDrawn","drawDot","drawLines","appendLabel","appendAnchor","toFront","scroll","_this","event","find","label","shortrefs","textbox","refs","substr","text-anchor","title","getBBox","fill-opacity","stroke","path","transform","anchor","circle","opacity","cursor","open","replace","hover","tooltip","commitTooltip","insertBefore","remove","avatar_box_x","avatar_box_y","stroke-width","image","author","icon","message","split","arrow","color","offset","parent","parentCommit","parentX1","parentX2","parentY","route","J1aa","exports","root","factory","modules","moduleId","installedModules","loaded","m","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","R","apply","eve","first","is","on","array","_engine","create","splice","nu","add","args","Array","slice","arguments","f","pop","clone","obj","res","constructor","key","has","repush","item","ii","cacher","scope","postprocessor","newf","arg","join","cache","count","shift","clrToString","hex","catmullRom2bezier","crp","z","d","iLen","base3","t","p1","p2","p3","p4","bezlen","x1","y1","x2","y2","x3","y3","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","math","sqrt","getTatLen","ll","step","t2","intersect","mmax","mmin","nx","ny","denominator","px","py","px2","toFixed","py2","interHelper","bez1","bez2","justCount","bbox1","bezierBBox","bbox2","isBBoxIntersect","l1","l2","n1","n2","dots1","dots2","xy","findDotsAtSegment","concat","di","di1","dj","dj1","ci","cj","t1","interPathHelper","path1","path2","_path2curve","x1m","y1m","x2m","y2m","pi","jj","pj","intr","kk","segment1","segment2","Matrix","a","b","e","x_y_w_h","S","CubicBezierAtTime","p1x","p1y","p2x","p2y","duration","sampleCurveX","ax","bx","cx","solveCurveX","epsilon","t0","d2","cy","by","ay","Animation","anim","ms","percents","newAnim","times","toFloat","sort","sortByNumber","runAnimation","percent","status","totalOrigin","params","isInAnim","isInAnimSet","next","prev","timestamp","from","to","diff","animationElements","el","initstatus","Date","availableAnimAttrs","paper","customAttributes","availableAttrs","getRGB","toColour","g","pathes","path2curve","toPath","_","eq","equaliseTransform","real","matrix","to2","extractTransform","values","Str","separator","from2","easing","easyeasy","easing_formulas","match","bezierrg","curve","pipe","del","stop","callback","repeat","origin","animation","requestAnimFrame","stopAnimation","version","paperproto","elements","ellipse","doc","document","win","oldRaphael","was","Raphael","Paper","ca","supportsTouch","DocumentTouch","E","String","events","touchMap","mousedown","mousemove","mouseup","lowerCase","toLowerCase","min","pow","PI","objectToString","toString","isnan","_ISURL","NaN","Infinity","-Infinity","round","parseFloat","toInt","parseInt","upperCase","toUpperCase","_availableAttrs","arrow-end","arrow-start","blur","clip-rect","font-family","font-size","font-style","font-weight","gradient","href","letter-spacing","rx","ry","src","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","target","class","_availableAnimAttrs","commaSpaces","hsrg","hs","rg","pathValues","eldata","_radial_gradient","rectPath","_rectPath","w","h","ellipsePath","getPath","_getPath","attrs","bbox","_getBBox","mapPath","pathi","_g","type","SVGAngle","implementation","hasFeature","createElement","innerHTML","firstChild","style","behavior","adj","svg","vml","_Paper","fn","_id","o","isArray","angle","atan2","rad","deg","snapTo","tolerance","rem","createUUID","uuidRegEx","uuidReplacer","random","setWindow","newwin","initWin","toHex","bod","docum","ActiveXObject","write","close","body","createPopup","range","createTextRange","queryCommandValue","display","appendChild","defaultView","getComputedStyle","getPropertyValue","hsbtoString","s","hsltoString","rgbtoString","prepareRGB","clr","packageRGB","rgb","hsb2rgb","hsl2rgb","rgb2hsl","rgb2hsb","v","G","B","X","C","H","V","L","M","_path2string","_preload","img","cssText","onload","removeChild","onerror","colour","indexOf","error","substring","charAt","red","green","blue","hsb","hsl","reset","parsePathString","pathString","pth","paths","arr","pathClone","paramCounts","q","name","parseTransformString","TString","ps","sleep","setTimeout","c1x","c1y","c2x","c2y","t13","t12","t3","mx","my","alpha","n","curveDim","isPointInsideBBox","pathIntersection","pathIntersectionNumber","isPointInsidePath","pathBBox","_removedFactory","methodname","pathDimensions","Y","dim","xmin","ymin","xmax","ymax","bb","pathArray","pathToRelative","_pathToRelative","rel","pa","pathToAbsolute","_pathToAbsolute","crz","dots","l2c","q2c","a2c","large_arc_flag","sweep_flag","recursive","_120","rotate","cos","sin","f1","f2","rx2","ry2","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","findDotAtSegment","dot","qx","qy","attrs2","processPath","pcom","tq","T","Q","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","tear","_parseDots","par","_tear","bottom","toMatrix","_tofront","_toback","_insertafter","el2","_insertbefore","transformPath","_extractTransform","tstr","tdata","dx","dy","sx","sy","tlen","command","absolute","inver","invert","translate","scale","dirtyT","getEmpty","_equaliseTransform","tt1","tt2","maxlength","_getContainer","container","getElementById","tagName","pixelWidth","offsetWidth","pixelHeight","offsetHeight","matrixproto","norm","normalize","mag","out","me","fromCharCode","toFilter","row","scalex","shear","scaley","acos","isSimple","isSuperSimple","noRotation","toTransformString","shorter","preventDefault","returnValue","preventTouch","originalEvent","stopPropagation","cancelBubble","stopTouch","getEventPosition","scrollY","documentElement","scrollX","clientX","clientY","addEvent","addEventListener","pos","_f","olde","targetTouches","removeEventListener","attachEvent","detachEvent","drag","dragMove","dragi","touches","touch","identifier","_drag","node","nextSibling","parentNode","opera","getElementByPoint","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","elproto","eventName","unbind","shape","removeData","getData","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","onDragOver","undrag","unmousedown","__set__","format","itemsArray","Set","setStart","setFinish","getSize","canvas","setSize","setViewBox","fit","raphael","getOffset","elem","box","getBoundingClientRect","ownerDocument","docElem","clientTop","clientLeft","pageYOffset","left","pageXOffset","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","getById","raphaelid","getElementsByBBox","forEach","bot","thisArg","getElementsByPoint","isPointInside","rp","realPath","isWithoutTransform","removed","dirty","bboxwt","glow","offsetx","offsety","getPointAtSegmentLength","getLengthFactory","istotal","subpath","onlystart","point","sp","subpaths","getTotalLength","getPointAtLength","getSubpathsAtLength","getSubpath","ef","linear","<",">","<>","backIn","backOut","elastic","bounce","easeIn","easeOut","easeInOut","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Now","paused","now","that","init","upto255","animateWith","onAnimation","delay","json","100","lastKey","animate","setTime","pause","resume","items","setproto","clear","index","insertion","tail","todel","arglen","exclude","collector","insertAfter","glowConfig","ret","shape2","index2","registerFont","face","fonts","fontcopy","glyphs","family","prop","glyph","getFont","weight","stretch","normal","bold","lighter","bolder","RegExp","fontName","test","thefont","print","string","size","letter_spacing","line_spacing","letters","notfirst","lineHeight","shifty","descent","curr","token","str","fullfill","replacer","all","quote","quotedName","isFunc","ninja","st","isLoaded","readyState","glob","current_event","numsort","firstDefined","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","_events","nes","names","es","sep","exist","hasOwnProperty","nt","subname","cur","nts","off","funcs","once","xlink","markers","block","classic","diamond","oval","markerCounter","setAttributeNS","setAttribute","createElementNS","webkitTapHighlightColor","addGradientFill","fx","fy","SVG","_fx","_fy","dir","isNaN","vector","defs","gradientTransform","stop-color","stop-opacity","isFinite","fillurl","fillOpacity","isIE9or10","mode","documentMode","location","protocol","host","pathname","search","updatePosition","pattern","patternTransform","addArrow","isEnd","refX","se","arrows","endPath","endMarker","startPath","startMarker","pathId","markerId","use","marker","getElementsByTagName","markerHeight","markerWidth","orient","refY","xlink:href","delta","startdx","enddx","dasharray","-",".","-.","-..",". ","- ","--","- .","--.","--..","addDashes","butt","square","dashes","setFillAndStroke","vis","visibility","att","nodeValue","val","createTextNode","pn","hl","clip","rc","clip-path","getAttribute","startString","endString","isURL","ig","patternUnits","stops","cssrule","tuneText","fontSize","tspan","texts","tspans","dif","getRealNode","Element","sw","show","containerStyle","canvasHidden","parentElement","clientWidth","clientHeight","def","subkey","toBack","afterNode","beforeNode","fltr","stdDeviation","_blur","filter","removeAttribute","preserveAspectRatio","_viewBox","con","Error","isFloating","cnvs","xmlns","xmlns:xlink","_left","_top","renderfix","vb","paperSize","aspectRatio","_vbSize","viewBox","getScreenCTM","createSVGMatrix","desc","map","Z","cssDot","zoom","pathTypes","ovalTypes","path2vml","total","vals","isMove","compensation","setCoords","fillpos","flip","kx","ky","coordsize","rotation","coordorigin","fillsize","position","newpath","isOval","div","clipRect","dstyle","textpath","textpathStyle","fontFamily","fontWeight","fontStyle","createNode","newstroke","strokeColor","joinstyle","miterlimit","endcap","dashstyle","span","brect","W","right","dirtyattrs","dd","bbx","fxfy","color2","clrs","focus","focussize","focusposition","_oid","oldt","vbs","_viewBoxShift","vbt","skew","isGrad","isPatt","bbt","auxGetBBox","runtimeStyle","margin","Path","textpathok","cs","styleSheets","createStyleSheet","addRule","namespaces","rvml","Whru","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default","gon","relative_url_root","nameText","idText","messageText","textSet","textWrap","boxWidth","content","abc","letterWidth","words","word","trim"],"mappings":"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","file":"network.ad62fae4365d1521f532.bundle.js","sourcesContent":["webpackJsonp([22],{\n\n/***/ \"+jvm\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__branch_graph__ = __webpack_require__(\"AKfL\");\n/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ((function () {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function () {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new __WEBPACK_IMPORTED_MODULE_0__branch_graph__[\"a\" /* default */]($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})());\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"45VA\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__network__ = __webpack_require__(\"+jvm\");\n/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\n\n\n$(function () {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new __WEBPACK_IMPORTED_MODULE_0__network__[\"a\" /* default */]({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"AKfL\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__raphael__ = __webpack_require__(\"Whru\");\n/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ((function () {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function () {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function (data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function (days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */])(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function () {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push(function () {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }.call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function () {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function () {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = j += 1) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function () {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function () {\n    var element;\n    element = this.element;\n    return $(element).scroll(function (_this) {\n      return function (event) {\n        return _this.renderPartialGraph();\n      };\n    }(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function () {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function () {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function () {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function () {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function () {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function () {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function (x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function (x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function () {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function () {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function () {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function (x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function (x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = j += 1) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function (commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})());\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"J1aa\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n/***/ }),\n\n/***/ \"Whru\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael__ = __webpack_require__(\"J1aa\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__);\n\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  var boxWidth = 300;\n  var icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  var nameText = this.text(x + 25, y + 10, commit.author.name);\n  var idText = this.text(x, y + 35, commit.id);\n  var messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  var textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace'\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold'\n  });\n  idText.attr({\n    fill: '#AAA'\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  var rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2\n  });\n  var tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.textWrap = function testWrap(t, width) {\n  var content = t.attr('text');\n  var abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc\n  });\n  var letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content\n  });\n  var words = content.split(' ');\n  var x = 0;\n  var s = [];\n  for (var j = 0, len = words.length; j < len; j += 1) {\n    var word = words[j];\n    if (x + word.length * letterWidth > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(word + ' ');\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim()\n  });\n  var b = t.getBBox();\n  var h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a);\n\n/***/ })\n\n},[\"45VA\"]);\n\n\n// WEBPACK FOOTER //\n// network.ad62fae4365d1521f532.bundle.js","/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\nimport BranchGraph from './branch_graph';\n\nexport default (function() {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function() {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new BranchGraph($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/network.js","/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\nimport Network from './network';\n\n$(function() {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new Network({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./network/network_bundle.js","/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\nimport Raphael from './raphael';\n\nexport default (function() {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function() {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function(data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function(days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = Raphael(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function() {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push((function() {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function() {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(Raphael.getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      Raphael.getColor();\n      Raphael.getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function() {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = (j += 1)) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function() {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function() {\n    var element;\n    element = this.element;\n    return $(element).scroll((function(_this) {\n      return function(event) {\n        return _this.renderPartialGraph();\n      };\n    })(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function() {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function() {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function() {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function() {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function() {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function() {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function(x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function(x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function() {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function() {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function() {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function(x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function(x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = (j += 1)) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function(commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/branch_graph.js","// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js\n// module id = J1aa\n// module chunks = 22","import Raphael from 'raphael/raphael';\n\nRaphael.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  const boxWidth = 300;\n  const icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  const nameText = this.text(x + 25, y + 10, commit.author.name);\n  const idText = this.text(x, y + 35, commit.id);\n  const messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  const textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace',\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold',\n  });\n  idText.attr({\n    fill: '#AAA',\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  const rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2,\n  });\n  const tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10,\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\nRaphael.prototype.textWrap = function testWrap(t, width) {\n  const content = t.attr('text');\n  const abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc,\n  });\n  const letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content,\n  });\n  const words = content.split(' ');\n  let x = 0;\n  const s = [];\n  for (let j = 0, len = words.length; j < len; j += 1) {\n    const word = words[j];\n    if (x + (word.length * letterWidth) > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(`${word} `);\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim(),\n  });\n  const b = t.getBBox();\n  const h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h,\n  });\n};\n\nexport default Raphael;\n\n\n\n// WEBPACK FOOTER //\n// ./network/raphael.js"],"sourceRoot":""}